PROJECT(morph)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}")

IF (CMAKE_MAJOR_VERSION EQUAL 2 AND NOT CMAKE_MINOR_VERSION LESS 6)
	cmake_policy( SET CMP0003 NEW )
	cmake_policy( SET CMP0005 OLD )
ENDIF (CMAKE_MAJOR_VERSION EQUAL 2 AND NOT CMAKE_MINOR_VERSION LESS 6)

MESSAGE (STATUS "${PROJECT_NAME} version ${VERSION}")

# Set where to find our internal CMake scripts
SET (PROJECT_CMAKE_DIR ${PROJECT_SOURCE_DIR}/cmake CACHE PATH "Location of CMake scripts")

# Enable -Wall by default unless on Win or Solaris
IF (NOT PROJECT_OS_WIN AND NOT PROJECT_OS_SOLARIS)
    SET (WALL "-Wno-write-strings" )
ENDIF (NOT PROJECT_OS_WIN AND NOT PROJECT_OS_SOLARIS)

if(APPLE)
SET( FORCE_ARCH "-arch i386" )
endif(APPLE)

SET (CMAKE_CXX_FLAGS_RELEASE " ${FORCE_ARCH} ${OPTIMIZE} -DNDEBUG ${WALL} " CACHE INTERNAL "C Flags for release" FORCE)
SET (CMAKE_CXX_FLAGS_DEBUG " -ggdb  ${FORCE_ARCH} ${WALL} " CACHE INTERNAL "C Flags for debug" FORCE)
SET (CMAKE_CXX_FLAGS_PROFILE " -ggdb -pg  ${FORCE_ARCH} ${WALL} " CACHE INTERNAL "C Flags for profile" FORCE)

#####################################
# Set the default build type
IF (NOT CMAKE_BUILD_TYPE)
  SET (CMAKE_BUILD_TYPE "debug" CACHE STRING 
    "Choose the type of build, options are: release (default) debug profile" FORCE)
ENDIF (NOT CMAKE_BUILD_TYPE)
STRING(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)

MESSAGE( STATUS "Build type ${CMAKE_BUILD_TYPE}" )

ENABLE_TESTING()

find_package( FLTK REQUIRED )
IF( FLTK_FOUND )
  MESSAGE( STATUS ${INDENT} "FLTK_LIBRARIES=${FLTK_LIBRARIES}" )
  MESSAGE( STATUS ${INDENT} "FLTK_INCLUDE_DIR=${FLTK_INCLUDE_DIR}" )
ELSE( FLTK_FOUND )
  MESSAGE( FATAL_ERROR "FLTK not found, aborting" )
ENDIF( FLTK_FOUND )

find_package( OpenGL REQUIRED )
IF(OPENGL_GLU_FOUND)
    MESSAGE( STATUS ${INDENT} "OPENGL_LIBRARIES=${OPENGL_LIBRARIES}" )
    MESSAGE( STATUS ${INDENT} "OPENGL_INCLUDE_DIR=${OPENGL_INCLUDE_DIR}" )
ELSE(OPENGL_GLU_FOUND )
  MESSAGE( FATAL_ERROR "OpenGL GLU not found, aborting" )
ENDIF(OPENGL_GLU_FOUND )


INCLUDE_DIRECTORIES(${FLTK_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR} ${GA_INCLUDE_DIRS})
LINK_DIRECTORIES(${FLTK_LIBRARY_DIRS} ${OPENGL_LIBRARY_DIRS} ${GA_LIBRARY_DIRS})


ADD_EXECUTABLE(genetic
   main.cc
   canvas_gl.cc
   organism.cc
   organism_sequence.cc
   organism_draw.cc
   GASequenceGenome.hh
   GASequenceGenome.cc
    )

TARGET_LINK_LIBRARIES(genetic ${FLTK_LIBRARIES} ${OPENGL_LIBRARIES} -lga)
